// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: metadata/v1/metadata.proto
// Protobuf Java Version: 4.29.3

package io.confluent.kafka.schemaregistry.storage.encoder;

/**
 * Protobuf type {@code metadata.v1.MetadataKeysetWrapperSpec}
 */
public final class MetadataKeysetWrapperSpec extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:metadata.v1.MetadataKeysetWrapperSpec)
        MetadataKeysetWrapperSpecOrBuilder {
  private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 29,
            /* patch= */ 3,
            /* suffix= */ "",
            MetadataKeysetWrapperSpec.class.getName());
  }
  // Use MetadataKeysetWrapperSpec.newBuilder() to construct.
  private MetadataKeysetWrapperSpec(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private MetadataKeysetWrapperSpec() {
    serializedKeyset_ = com.google.protobuf.ByteString.EMPTY;
  }

  public static final com.google.protobuf.Descriptors.Descriptor
  getDescriptor() {
    return io.confluent.kafka.schemaregistry.storage.encoder.Metadata.internal_static_metadata_v1_MetadataKeysetWrapperSpec_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
  internalGetFieldAccessorTable() {
    return io.confluent.kafka.schemaregistry.storage.encoder.Metadata.internal_static_metadata_v1_MetadataKeysetWrapperSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                    io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec.class, io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec.Builder.class);
  }

  public static final int SERIALIZED_KEYSET_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString serializedKeyset_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * This will store the serialized KeysetHandle
   * </pre>
   *
   * <code>bytes serialized_keyset = 1;</code>
   * @return The serializedKeyset.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSerializedKeyset() {
    return serializedKeyset_;
  }

  public static final int ROTATION_NEEDED_FIELD_NUMBER = 2;
  private boolean rotationNeeded_ = false;
  /**
   * <pre>
   * This will store the rotation flag
   * </pre>
   *
   * <code>bool rotation_needed = 2;</code>
   * @return The rotationNeeded.
   */
  @java.lang.Override
  public boolean getRotationNeeded() {
    return rotationNeeded_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
          throws java.io.IOException {
    if (!serializedKeyset_.isEmpty()) {
      output.writeBytes(1, serializedKeyset_);
    }
    if (rotationNeeded_ != false) {
      output.writeBool(2, rotationNeeded_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!serializedKeyset_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(1, serializedKeyset_);
    }
    if (rotationNeeded_ != false) {
      size += com.google.protobuf.CodedOutputStream
              .computeBoolSize(2, rotationNeeded_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec)) {
      return super.equals(obj);
    }
    io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec other = (io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec) obj;

    if (!getSerializedKeyset()
            .equals(other.getSerializedKeyset())) return false;
    if (getRotationNeeded()
            != other.getRotationNeeded()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SERIALIZED_KEYSET_FIELD_NUMBER;
    hash = (53 * hash) + getSerializedKeyset().hashCode();
    hash = (37 * hash) + ROTATION_NEEDED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getRotationNeeded());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(java.io.InputStream input)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
  }
  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code metadata.v1.MetadataKeysetWrapperSpec}
   */
  public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:metadata.v1.MetadataKeysetWrapperSpec)
          io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpecOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
      return io.confluent.kafka.schemaregistry.storage.encoder.Metadata.internal_static_metadata_v1_MetadataKeysetWrapperSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
    internalGetFieldAccessorTable() {
      return io.confluent.kafka.schemaregistry.storage.encoder.Metadata.internal_static_metadata_v1_MetadataKeysetWrapperSpec_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                      io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec.class, io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec.Builder.class);
    }

    // Construct using io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec.newBuilder()
    private Builder() {

    }

    private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      serializedKeyset_ = com.google.protobuf.ByteString.EMPTY;
      rotationNeeded_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
    getDescriptorForType() {
      return io.confluent.kafka.schemaregistry.storage.encoder.Metadata.internal_static_metadata_v1_MetadataKeysetWrapperSpec_descriptor;
    }

    @java.lang.Override
    public io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec getDefaultInstanceForType() {
      return io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec.getDefaultInstance();
    }

    @java.lang.Override
    public io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec build() {
      io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec buildPartial() {
      io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec result = new io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.serializedKeyset_ = serializedKeyset_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.rotationNeeded_ = rotationNeeded_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec) {
        return mergeFrom((io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec other) {
      if (other == io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec.getDefaultInstance()) return this;
      if (other.getSerializedKeyset() != com.google.protobuf.ByteString.EMPTY) {
        setSerializedKeyset(other.getSerializedKeyset());
      }
      if (other.getRotationNeeded() != false) {
        setRotationNeeded(other.getRotationNeeded());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              serializedKeyset_ = input.readBytes();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              rotationNeeded_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.ByteString serializedKeyset_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * This will store the serialized KeysetHandle
     * </pre>
     *
     * <code>bytes serialized_keyset = 1;</code>
     * @return The serializedKeyset.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSerializedKeyset() {
      return serializedKeyset_;
    }
    /**
     * <pre>
     * This will store the serialized KeysetHandle
     * </pre>
     *
     * <code>bytes serialized_keyset = 1;</code>
     * @param value The serializedKeyset to set.
     * @return This builder for chaining.
     */
    public Builder setSerializedKeyset(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      serializedKeyset_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This will store the serialized KeysetHandle
     * </pre>
     *
     * <code>bytes serialized_keyset = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearSerializedKeyset() {
      bitField0_ = (bitField0_ & ~0x00000001);
      serializedKeyset_ = getDefaultInstance().getSerializedKeyset();
      onChanged();
      return this;
    }

    private boolean rotationNeeded_ ;
    /**
     * <pre>
     * This will store the rotation flag
     * </pre>
     *
     * <code>bool rotation_needed = 2;</code>
     * @return The rotationNeeded.
     */
    @java.lang.Override
    public boolean getRotationNeeded() {
      return rotationNeeded_;
    }
    /**
     * <pre>
     * This will store the rotation flag
     * </pre>
     *
     * <code>bool rotation_needed = 2;</code>
     * @param value The rotationNeeded to set.
     * @return This builder for chaining.
     */
    public Builder setRotationNeeded(boolean value) {

      rotationNeeded_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This will store the rotation flag
     * </pre>
     *
     * <code>bool rotation_needed = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearRotationNeeded() {
      bitField0_ = (bitField0_ & ~0x00000002);
      rotationNeeded_ = false;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:metadata.v1.MetadataKeysetWrapperSpec)
  }

  // @@protoc_insertion_point(class_scope:metadata.v1.MetadataKeysetWrapperSpec)
  private static final io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec();
  }

  public static io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MetadataKeysetWrapperSpec>
          PARSER = new com.google.protobuf.AbstractParser<MetadataKeysetWrapperSpec>() {
    @java.lang.Override
    public MetadataKeysetWrapperSpec parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<MetadataKeysetWrapperSpec> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MetadataKeysetWrapperSpec> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.confluent.kafka.schemaregistry.storage.encoder.MetadataKeysetWrapperSpec getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

