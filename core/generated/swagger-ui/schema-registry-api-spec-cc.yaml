openapi: 3.0.1
info:
  title: Confluent Schema Registry
  description: REST API for the Schema Registry
  contact:
    name: Data Governance Team
    url: https://confluent.slack.com/app_redirect?channel=data-governance-eng
    email: data-governance@confluent.io
  version: 1.0.0
  x-api-id: cbdaa8a3-56f3-4de9-95a5-b4b61172ea3a
  x-api-group: v1
  x-audience: external-public
  x-tag-group: Schema Registry API (%s)
servers:
- url: https://psrc-00000.region.provider.confluent.cloud
  description: Confluent Cloud Schema Registry Endpoint. For example https://psrc-00000.region.provider.confluent.cloud
paths:
  /compatibility/subjects/{subject}/versions/{version}:
    post:
      summary: Test schema compatibility against a particular schema subject-version
      description: "Test input schema against a particular version of a subject's\
        \ schema for compatibility. The compatibility level applied for the check\
        \ is the configured compatibility level for the subject (http:get:: /config/(string:\
        \ subject)). If this subject's compatibility level was never changed, then\
        \ the global compatibility level applies (http:get:: /config)."
      operationId: testCompatibilityBySubjectName
      parameters:
      - name: subject
        in: path
        description: Subject of the schema version against which compatibility is
          to be tested
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the subject's schema against which compatibility\
          \ is to be tested. Valid values for versionId are between [1,2^31-1] or\
          \ the string \"latest\".\"latest\" checks compatibility of the input schema\
          \ with the last registered schema under the specified subject"
        required: true
        schema:
          type: string
      - name: verbose
        in: query
        description: Whether to return detailed error messages
        schema:
          type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        "200":
          description: Compatibility check result
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: |-
            Error code 42201 -- Invalid schema or schema type
            Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /compatibility/subjects/{subject}/versions:
    post:
      summary: Test schema compatibility against all schemas under a subject
      description: "Test input schema against a subject's schemas for compatibility,\
        \ based on the configured compatibility level of the subject. In other words,\
        \ it will perform the same compatibility check as register for that subject.\
        \ The compatibility level applied for the check is the configured compatibility\
        \ level for the subject (http:get:: /config/(string: subject)). If this subject's\
        \ compatibility level was never changed, then the global compatibility level\
        \ applies (http:get:: /config)."
      operationId: testCompatibilityForSubject
      parameters:
      - name: subject
        in: path
        description: Subject of the schema version against which compatibility is
          to be tested
        required: true
        schema:
          type: string
      - name: verbose
        in: query
        description: Whether to return detailed error messages
        schema:
          type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        "200":
          description: Compatibility check result
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
        "422":
          description: |-
            Error code 42201 -- Invalid schema or schema type
            Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /config/{subject}:
    get:
      summary: Get subject compatibility level
      description: Retrieves compatibility level for a subject.
      operationId: getSubjectLevelConfig
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: defaultToGlobal
        in: query
        description: Whether to return the global compatibility level  if subject
          compatibility level not found
        schema:
          type: boolean
      responses:
        "200":
          description: The subject compatibility level
        "404":
          description: Subject not found
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    put:
      summary: Update subject compatibility level
      description: "Update compatibility level for the specified subject. On success,\
        \ echoes the original request back to the client."
      operationId: updateSubjectLevelConfig
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      requestBody:
        description: Config Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        required: true
      responses:
        "200":
          description: The original request
        "422":
          description: |-
            Error code 42203 -- Invalid compatibility level
            Error code 40402 -- Version not found
        "500":
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    delete:
      summary: Deletes the specified subject-level compatibility level config and
        revert to the global default.
      operationId: deleteSubjectConfig
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Operation succeeded. Returns old compatibility level
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/json; qs=0.5:
              schema:
                type: string
                enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
        "404":
          description: Error code 40401 -- Subject not found
        "500":
          description: Error code 50001 -- Error in the backend datastore
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /config:
    get:
      summary: Get global compatibility level.
      operationId: getTopLevelConfig
      responses:
        "200":
          description: The global compatibility level
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    put:
      summary: "Update global compatibility level. On success, echoes the original\
        \ request back to the client."
      operationId: updateTopLevelConfig
      requestBody:
        description: Config Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        required: true
      responses:
        "200":
          description: The original request
        "422":
          description: Error code 42203 -- Invalid compatibility level
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /contexts:
    get:
      summary: List contexts
      description: Retrieves a list of contexts.
      operationId: listContexts
      responses:
        "200":
          description: The contexts
        "500":
          description: Error code 50001 -- Error in the backend datastore
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /mode/{subject}:
    get:
      summary: Get subject mode
      description: Retrieves the subject mode.
      operationId: getMode
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: defaultToGlobal
        in: query
        description: Whether to return the global mode if subject mode not found
        schema:
          type: boolean
      responses:
        "200":
          description: The subject mode
        "404":
          description: Subject not found
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    put:
      summary: Update subject mode
      description: "Update mode for the specified subject. On success, echoes the\
        \ original request back to the client."
      operationId: updateMode
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        schema:
          type: boolean
      requestBody:
        description: Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        required: true
      responses:
        "200":
          description: The original request
        "422":
          description: |-
            Error code 42204 -- Invalid mode
            Error code 42205 -- Operation not permitted
        "500":
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
            Error code 50004 -- Unknown leader
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    delete:
      summary: Delete subject mode
      description: Deletes the specified subject-level mode and reverts to the global
        default.
      operationId: deleteSubjectMode
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Operation succeeded. Returns old mode
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                enum:
                - READWRITE
                - READONLY
                - READONLY_OVERRIDE
                - IMPORT
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                enum:
                - READWRITE
                - READONLY
                - READONLY_OVERRIDE
                - IMPORT
            application/json; qs=0.5:
              schema:
                type: string
                enum:
                - READWRITE
                - READONLY
                - READONLY_OVERRIDE
                - IMPORT
        "404":
          description: Error code 40401 -- Subject not found
        "500":
          description: Error code 50001 -- Error in the backend datastore
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /mode:
    get:
      summary: Get global mode
      description: Retrieves global mode.
      operationId: getTopLevelMode
      responses:
        "200":
          description: The global mode
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    put:
      summary: Update global mode
      description: "Update global mode. On success, echoes the original request back\
        \ to the client."
      operationId: updateTopLevelMode
      parameters:
      - name: force
        in: query
        description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        schema:
          type: boolean
      requestBody:
        description: Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        required: true
      responses:
        "200":
          description: The original request
        "422":
          description: |-
            Error code 42204 -- Invalid mode
            Error code 42205 -- Operation not permitted
        "500":
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
            Error code 50004 -- Unknown leader
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /schemas/ids/{id}:
    get:
      summary: Get schema string by ID
      description: Retrieves the schema string identified by the input ID.
      operationId: getSchema
      parameters:
      - name: id
        in: path
        description: Globally unique identifier of the schema
        required: true
        schema:
          type: integer
          format: int32
      - name: subject
        in: query
        description: Name of the subject
        schema:
          type: string
      - name: format
        in: query
        description: "Desired output format, dependent on schema type"
        schema:
          type: string
          default: ""
      - name: fetchMaxId
        in: query
        description: Whether to fetch the maximum schema identifier that exists
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: The schema string
        "404":
          description: |
            Error code 40403 -- Schema not found
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /schemas/types:
    get:
      summary: List supported schema types
      description: Retrieve the schema types supported by this registry.
      operationId: getSchemaTypes
      responses:
        "200":
          description: The supported schema types
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /schemas:
    get:
      summary: List schemas
      description: Get the schemas matching the specified parameters.
      operationId: getSchemas
      parameters:
      - name: subjectPrefix
        in: query
        description: Filters results by the respective subject prefix
        schema:
          type: string
          default: ""
      - name: deleted
        in: query
        description: Whether to return soft deleted schemas
        schema:
          type: boolean
          default: false
      - name: latestOnly
        in: query
        description: Whether to return latest schema versions only for each matching
          subject
        schema:
          type: boolean
          default: false
      - name: offset
        in: query
        description: Pagination offset for results
        schema:
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        description: Pagination size for results. Ignored if negative
        schema:
          type: integer
          format: int32
          default: -1
      responses:
        "200":
          description: The schemas matching the specified parameters
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /schemas/ids/{id}/subjects:
    get:
      summary: List subjects associated to schema ID
      description: Retrieves all the subjects associated with a particular schema
        ID.
      operationId: getSubjects
      parameters:
      - name: id
        in: path
        description: Globally unique identifier of the schema
        required: true
        schema:
          type: integer
          format: int32
      - name: subject
        in: query
        description: Filters results by the respective subject
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include subjects where the schema was deleted
        schema:
          type: boolean
      responses:
        "200":
          description: The subjects matching the specified parameters
        "404":
          description: |
            Error code 40403 -- Schema not found
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /schemas/ids/{id}/versions:
    get:
      summary: List subject-versions associated to schema ID
      description: Get all the subject-version pairs associated with the input ID.
      operationId: getVersions
      parameters:
      - name: id
        in: path
        description: Globally unique identifier of the schema
        required: true
        schema:
          type: integer
          format: int32
      - name: subject
        in: query
        description: Filters results by the respective subject
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include subject versions where the schema was deleted
        schema:
          type: boolean
      responses:
        "200":
          description: The subject versions matching the specified parameters
        "404":
          description: |
            Error code 40403 -- Schema not found
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /subjects/{subject}/versions/{version}:
    get:
      summary: Get schema by version
      description: Retrieves a specific version of the schema registered under this
        subject.
      operationId: getSchemaByVersion
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include deleted schema
        schema:
          type: boolean
      responses:
        "200":
          description: The schema
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "422":
          description: Error code 42202 -- Invalid version
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "500":
          description: Error code 50001 -- Error in the backend data store
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    delete:
      summary: Delete schema version
      description: "Deletes a specific version of the schema registered under this\
        \ subject. This only deletes the version and the schema ID remains intact\
        \ making it still possible to decode data using the schema ID. This API is\
        \ recommended to be used only in development environments or under extreme\
        \ circumstances where-in, its required to delete a previously registered schema\
        \ for compatibility purposes or re-register previously registered schema."
      operationId: deleteSchemaVersion
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        schema:
          type: string
      - name: permanent
        in: query
        description: Whether to perform a permanent delete
        schema:
          type: boolean
      responses:
        "200":
          description: Operation succeeded. Returns the schema version
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: integer
                format: int32
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: integer
                format: int32
            application/json; qs=0.5:
              schema:
                type: integer
                format: int32
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /subjects/{subject}/versions/{version}/referencedby:
    get:
      summary: List schemas referencing a schema
      description: Retrieves the IDs of schemas that reference the specified schema.
      operationId: getReferencedBy
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The IDs of schemas that reference the specified schema
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /subjects/{subject}/versions/{version}/schema:
    get:
      summary: Get schema string by version
      description: Retrieves the schema for the specified version of this subject.
        Only the unescaped schema string is returned.
      operationId: getSchemaOnly
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include deleted schema
        schema:
          type: boolean
      responses:
        "200":
          description: The schema string
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /subjects/{subject}/versions:
    get:
      summary: List versions under subject
      description: Retrieves a list of versions registered under the specified subject.
      operationId: listVersions
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include deleted schemas
        schema:
          type: boolean
      responses:
        "200":
          description: The version numbers matching the specified parameters
        "404":
          description: Error code 40401 -- Subject not found
        "500":
          description: Error code 50001 -- Error in the backend data store
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    post:
      summary: Register schema under a subject
      description: "Register a new schema under the specified subject. If successfully\
        \ registered, this returns the unique identifier of this schema in the registry.\
        \ The returned identifier should be used to retrieve this schema from the\
        \ schemas resource and is different from the schema's version which is associated\
        \ with the subject. If the same schema is registered under a different subject,\
        \ the same identifier will be returned. However, the version of the schema\
        \ may be different under different subjects.\nA schema should be compatible\
        \ with the previously registered schema or schemas (if there are any) as per\
        \ the configured compatibility level. The configured compatibility level can\
        \ be obtained by issuing a GET http:get:: /config/(string: subject). If that\
        \ returns null, then GET http:get:: /config\nWhen there are multiple instances\
        \ of Schema Registry running in the same cluster, the schema registration\
        \ request will be forwarded to one of the instances designated as the primary.\
        \ If the primary is not available, the client will get an error code indicating\
        \ that the forwarding has failed."
      operationId: register
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: normalize
        in: query
        description: Whether to register the normalized schema
        schema:
          type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
        "409":
          description: Incompatible schema
        "422":
          description: Error code 42201 -- Invalid schema or schema type
        "500":
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50002 -- Operation timed out
            Error code 50003 -- Error while forwarding the request to the primary
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /subjects/{subject}:
    post:
      summary: Lookup schema under subject
      description: "Check if a schema has already been registered under the specified\
        \ subject. If so, this returns the schema string along with its globally unique\
        \ identifier, its version under this subject and the subject name."
      operationId: lookUpSchemaUnderSubject
      parameters:
      - name: subject
        in: path
        description: Subject under which the schema will be registered
        required: true
        schema:
          type: string
      - name: normalize
        in: query
        description: Whether to lookup the normalized schema
        schema:
          type: boolean
      - name: deleted
        in: query
        description: Whether to lookup deleted schemas
        schema:
          type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        "200":
          description: The schema
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40403 -- Schema not found
        "500":
          description: Internal server error
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
    delete:
      summary: Delete subject
      description: Deletes the specified subject and its associated compatibility
        level if registered. It is recommended to use this API only when a topic needs
        to be recycled or in development environment.
      operationId: deleteSubject
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: permanent
        in: query
        description: Whether to perform a permanent delete
        schema:
          type: boolean
      responses:
        "200":
          description: Operation succeeded. Returns list of schema versions deleted
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
        "404":
          description: Error code 40401 -- Subject not found
        "500":
          description: Error code 50001 -- Error in the backend datastore
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
  /subjects:
    get:
      summary: List subjects
      description: Retrieves a list of registered subjects matching specified parameters.
      operationId: list
      parameters:
      - name: subjectPrefix
        in: query
        description: Subject name prefix
        schema:
          type: string
          default: ':*:'
      - name: deleted
        in: query
        description: Whether to look up deleted subjects
        schema:
          type: boolean
      responses:
        "200":
          description: The subjects matching the specified parameters
        "500":
          description: Error code 50001 -- Error in the backend datastore
        "400":
          description: Bad Request
        "429":
          description: Rate Limit Error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - api-key: []
components:
  schemas:
    CompatibilityCheckResponse:
      type: object
      properties:
        is_compatible:
          type: boolean
          description: Whether the compared schemas are compatible
        messages:
          type: array
          description: Error messages
          items:
            type: string
            description: Error messages
      description: Compatibility check response
    RegisterSchemaRequest:
      type: object
      properties:
        version:
          type: integer
          description: Version number
          format: int32
        id:
          type: integer
          description: Globally unique identifier of the schema
          format: int32
        schemaType:
          type: string
          description: Schema type
        references:
          type: array
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
        schema:
          type: string
          description: Schema definition string
      description: Schema register request
    SchemaReference:
      type: object
      properties:
        name:
          type: string
          description: Reference name
        subject:
          type: string
          description: Name of the referenced subject
        version:
          type: integer
          description: Version number of the referenced subject
          format: int32
      description: Schema reference
    Config:
      type: object
      properties:
        compatibilityLevel:
          type: string
          description: Compatibility Level
          enum:
          - "BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE,\
            \ NONE"
      description: Config
    ConfigUpdateRequest:
      type: object
      properties:
        compatibility:
          type: string
          description: Compatibility Level
          enum:
          - "BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE,\
            \ NONE"
      description: Config update request
    Mode:
      type: object
      properties:
        mode:
          type: string
          description: Schema Registry operating mode
          enum:
          - "READWRITE, READONLY, READONLY_OVERRIDE, IMPORT"
      description: Schema Registry operating mode
    ModeUpdateRequest:
      type: object
      properties:
        mode:
          type: string
          description: Schema Registry operating mode
          enum:
          - "READWRITE, READONLY, READONLY_OVERRIDE, IMPORT"
      description: Mode update request
    SchemaString:
      type: object
      properties:
        schemaType:
          type: string
          description: Schema type
        schema:
          type: string
          description: Schema string identified by the ID
        references:
          type: array
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
        maxId:
          type: integer
          description: Maximum ID
          format: int32
      description: Schema definition
    Schema:
      type: object
      properties:
        subject:
          type: string
          description: Name of the subject
        version:
          type: integer
          description: Version number
          format: int32
        id:
          type: integer
          description: Globally unique identifier of the schema
          format: int32
        schemaType:
          type: string
          description: Schema type
        references:
          type: array
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
        schema:
          type: string
          description: Schema definition string
      description: Schema
    SubjectVersion:
      type: object
      properties:
        subject:
          type: string
          description: Name of the subject
        version:
          type: integer
          description: Version number
          format: int32
      description: Subject version pair
    ErrorMessage:
      type: object
      properties:
        error_code:
          type: integer
          format: int32
        message:
          type: string
    RegisterSchemaResponse:
      type: object
      properties:
        id:
          type: integer
          description: Globally unique identifier of the schema
          format: int32
      description: Schema register response
  securitySchemes:
    api-key:
      type: http
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API
        Key ID as the username and API Key Secret as the password.
      scheme: basic
