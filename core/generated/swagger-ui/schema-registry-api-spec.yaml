openapi: 3.0.1
info:
  title: Confluent Schema Registry
  version: v1
paths:
  /compatibility/subjects/{subject}/versions/{version}:
    post:
      summary: Test input schema against a particular version of a subject's schema
        for compatibility.
      description: "the compatibility level applied for the check is the configured\
        \ compatibility level for the subject (http:get:: /config/(string: subject)).\
        \ If this subject's compatibility level was never changed, then the global\
        \ compatibility level applies (http:get:: /config)."
      operationId: testCompatibilityBySubjectName
      parameters:
      - name: subject
        in: path
        description: Subject of the schema version against which compatibility is
          to be tested
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the subject's schema against which compatibility\
          \ is to be tested. Valid values for versionId are between [1,2^31-1] or\
          \ the string \"latest\".\"latest\" checks compatibility of the input schema\
          \ with the last registered schema under the specified subject"
        required: true
        schema:
          type: string
      - name: verbose
        in: query
        description: Whether to return detailed error messages
        schema:
          type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: |-
            Error code 42201 -- Invalid schema or schema type
            Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
  /:
    get:
      summary: Schema Registry Root Resource
      description: The Root resource is a no-op.
      operationId: get
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
            application/json; qs=0.5:
              schema:
                type: string
    post:
      operationId: post
      requestBody:
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              type: object
              additionalProperties:
                type: string
          application/vnd.schemaregistry+json:
            schema:
              type: object
              additionalProperties:
                type: string
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
          application/octet-stream:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        default:
          description: default response
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: object
                additionalProperties:
                  type: string
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: object
                additionalProperties:
                  type: string
            application/json; qs=0.5:
              schema:
                type: object
                additionalProperties:
                  type: string
  /compatibility/subjects/{subject}/versions:
    post:
      summary: "Test input schema against a subject's schemas for compatibility, based\
        \ on the compatibility level of the subject configured. In other word, it\
        \ will perform the same compatibility check as register for that subject"
      description: "the compatibility level applied for the check is the configured\
        \ compatibility level for the subject (http:get:: /config/(string: subject)).\
        \ If this subject's compatibility level was never changed, then the global\
        \ compatibility level applies (http:get:: /config)."
      operationId: testCompatibilityForSubject
      parameters:
      - name: subject
        in: path
        description: Subject of the schema version against which compatibility is
          to be tested
        required: true
        schema:
          type: string
      - name: verbose
        in: query
        description: Whether to return detailed error messages
        schema:
          type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
        "422":
          description: |-
            Error code 42201 -- Invalid schema or schema type
            Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
  /config:
    get:
      summary: Get global compatibility level.
      operationId: getTopLevelConfig
      responses:
        "500":
          description: Error code 50001 -- Error in the backend data store
    put:
      summary: Update global compatibility level.
      operationId: updateTopLevelConfig
      requestBody:
        description: Config Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        required: true
      responses:
        "422":
          description: Error code 42203 -- Invalid compatibility level
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
  /config/{subject}:
    get:
      summary: Get compatibility level for a subject.
      operationId: getSubjectLevelConfig
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: defaultToGlobal
        in: query
        description: Whether to return the global compatibility level if subject compatibility
          level not found
        schema:
          type: boolean
      responses:
        "404":
          description: Subject not found
        "500":
          description: Error code 50001 -- Error in the backend data store
    put:
      summary: Update compatibility level for the specified subject.
      operationId: updateSubjectLevelConfig
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      requestBody:
        description: Config Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        required: true
      responses:
        "422":
          description: |-
            Error code 42203 -- Invalid compatibility level
            Error code 40402 -- Version not found
        "500":
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
    delete:
      summary: Deletes the specified subject-level compatibility level config and
        revert to the global default.
      operationId: deleteSubjectConfig
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
            application/json; qs=0.5:
              schema:
                type: string
                enum:
                - NONE
                - BACKWARD
                - BACKWARD_TRANSITIVE
                - FORWARD
                - FORWARD_TRANSITIVE
                - FULL
                - FULL_TRANSITIVE
        "404":
          description: Error code 40401 -- Subject not found
        "500":
          description: Error code 50001 -- Error in the backend datastore
  /contexts:
    get:
      summary: Get a list of contexts.
      operationId: listContexts
      responses:
        "500":
          description: Error code 50001 -- Error in the backend datastore
  /mode:
    get:
      summary: Get global mode.
      operationId: getTopLevelMode
      responses:
        "500":
          description: Error code 50001 -- Error in the backend data store
    put:
      summary: Update global mode.
      operationId: updateTopLevelMode
      parameters:
      - name: force
        in: query
        description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        schema:
          type: boolean
      requestBody:
        description: Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        required: true
      responses:
        "422":
          description: |-
            Error code 42204 -- Invalid mode
            Error code 42205 -- Operation not permitted
        "500":
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
            Error code 50004 -- Unknown leader
  /mode/{subject}:
    get:
      summary: Get mode for a subject.
      operationId: getMode
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: defaultToGlobal
        in: query
        description: Whether to return the global mode if subject mode not found
        schema:
          type: boolean
      responses:
        "404":
          description: Subject not found
        "500":
          description: Error code 50001 -- Error in the backend data store
    put:
      summary: Update mode for the specified subject.
      operationId: updateMode
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: force
        in: query
        description: Whether to force update if setting mode to IMPORT and schemas
          currently exist
        schema:
          type: boolean
      requestBody:
        description: Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        required: true
      responses:
        "422":
          description: |-
            Error code 42204 -- Invalid mode
            Error code 42205 -- Operation not permitted
        "500":
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50003 -- Error while forwarding the request to the primary
            Error code 50004 -- Unknown leader
    delete:
      summary: Deletes the specified subject-level mode and revert to the global default.
      operationId: deleteSubjectMode
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                enum:
                - READWRITE
                - READONLY
                - READONLY_OVERRIDE
                - IMPORT
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                enum:
                - READWRITE
                - READONLY
                - READONLY_OVERRIDE
                - IMPORT
            application/json; qs=0.5:
              schema:
                type: string
                enum:
                - READWRITE
                - READONLY
                - READONLY_OVERRIDE
                - IMPORT
        "404":
          description: Error code 40401 -- Subject not found
        "500":
          description: Error code 50001 -- Error in the backend datastore
  /schemas:
    get:
      summary: Get the schemas.
      operationId: getSchemas
      parameters:
      - name: subjectPrefix
        in: query
        description: Filters results by the respective subject prefix
        schema:
          type: string
          default: ""
      - name: deleted
        in: query
        description: Whether to return soft deleted schemas
        schema:
          type: boolean
          default: false
      - name: latestOnly
        in: query
        description: Whether to return latest schema versions only for each matching
          subject
        schema:
          type: boolean
          default: false
      - name: offset
        in: query
        description: Pagination offset for results
        schema:
          type: integer
          format: int32
          default: 0
      - name: limit
        in: query
        description: Pagination size for results. Ignored if negative
        schema:
          type: integer
          format: int32
          default: -1
      responses:
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
  /schemas/ids/{id}:
    get:
      summary: Get the schema string identified by the input ID.
      operationId: getSchema
      parameters:
      - name: id
        in: path
        description: Globally unique identifier of the schema
        required: true
        schema:
          type: integer
          format: int32
      - name: subject
        in: query
        description: Name of the subject
        schema:
          type: string
      - name: format
        in: query
        description: "Desired output format, dependent on schema type"
        schema:
          type: string
          default: ""
      - name: fetchMaxId
        in: query
        description: Whether to fetch the maximum schema identifier that exists
        schema:
          type: boolean
          default: false
      responses:
        "404":
          description: |
            Error code 40403 -- Schema not found
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
  /schemas/ids/{id}/subjects:
    get:
      summary: Get all the subjects associated with the input ID.
      operationId: getSubjects
      parameters:
      - name: id
        in: path
        description: Globally unique identifier of the schema
        required: true
        schema:
          type: integer
          format: int32
      - name: subject
        in: query
        description: Filters results by the respective subject
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include subjects where the schema was deleted
        schema:
          type: boolean
      responses:
        "404":
          description: |
            Error code 40403 -- Schema not found
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
  /schemas/ids/{id}/versions:
    get:
      summary: Get all the subject-version pairs associated with the input ID.
      operationId: getVersions
      parameters:
      - name: id
        in: path
        description: Globally unique identifier of the schema
        required: true
        schema:
          type: integer
          format: int32
      - name: subject
        in: query
        description: Filters results by the respective subject
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include subject versions where the schema was deleted
        schema:
          type: boolean
      responses:
        "404":
          description: |
            Error code 40403 -- Schema not found
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
  /schemas/types:
    get:
      summary: Get the schema types supported by this registry.
      operationId: getSchemaTypes
      responses:
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
  /subjects:
    get:
      summary: Get a list of registered subjects.
      operationId: list
      parameters:
      - name: subjectPrefix
        in: query
        schema:
          type: string
          default: ':*:'
      - name: deleted
        in: query
        schema:
          type: boolean
      responses:
        "500":
          description: Error code 50001 -- Error in the backend datastore
  /subjects/{subject}:
    post:
      summary: "Check if a schema has already been registered under the specified\
        \ subject. If so, this returns the schema string along with its globally unique\
        \ identifier, its version under this subject and the subject name."
      operationId: lookUpSchemaUnderSubject
      parameters:
      - name: subject
        in: path
        description: Subject under which the schema will be registered
        required: true
        schema:
          type: string
      - name: normalize
        in: query
        description: Whether to lookup the normalized schema
        schema:
          type: boolean
      - name: deleted
        in: query
        description: Whether to lookup deleted schemas
        schema:
          type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40403 -- Schema not found
        "500":
          description: Internal server error
    delete:
      summary: Deletes the specified subject and its associated compatibility level
        if registered. It is recommended to use this API only when a topic needs to
        be recycled or in development environment.
      operationId: deleteSubject
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: permanent
        in: query
        description: Whether to perform a permanent delete
        schema:
          type: boolean
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
        "404":
          description: Error code 40401 -- Subject not found
        "500":
          description: Error code 50001 -- Error in the backend datastore
  /subjects/{subject}/versions:
    get:
      summary: Get a list of versions registered under the specified subject.
      operationId: listVersions
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include deleted schemas
        schema:
          type: boolean
      responses:
        "404":
          description: Error code 40401 -- Subject not found
        "500":
          description: Error code 50001 -- Error in the backend data store
    post:
      summary: "Register a new schema under the specified subject. If successfully\
        \ registered, this returns the unique identifier of this schema in the registry.\
        \ The returned identifier should be used to retrieve this schema from the\
        \ schemas resource and is different from the schema's version which is associated\
        \ with the subject. If the same schema is registered under a different subject,\
        \ the same identifier will be returned. However, the version of the schema\
        \ may be different under different subjects.\nA schema should be compatible\
        \ with the previously registered schema or schemas (if there are any) as per\
        \ the configured compatibility level. The configured compatibility level can\
        \ be obtained by issuing a GET http:get:: /config/(string: subject). If that\
        \ returns null, then GET http:get:: /config\nWhen there are multiple instances\
        \ of Schema Registry running in the same cluster, the schema registration\
        \ request will be forwarded to one of the instances designated as the primary.\
        \ If the primary is not available, the client will get an error code indicating\
        \ that the forwarding has failed."
      operationId: register
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: normalize
        in: query
        description: Whether to register the normalized schema
        schema:
          type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
        "409":
          description: Incompatible schema
        "422":
          description: Error code 42201 -- Invalid schema or schema type
        "500":
          description: |-
            Error code 50001 -- Error in the backend data store
            Error code 50002 -- Operation timed out
            Error code 50003 -- Error while forwarding the request to the primary
  /subjects/{subject}/versions/{version}:
    get:
      summary: Get a specific version of the schema registered under this subject.
      operationId: getSchemaByVersion
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include deleted schema
        schema:
          type: boolean
      responses:
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
    delete:
      summary: "Deletes a specific version of the schema registered under this subject.\
        \ This only deletes the version and the schema ID remains intact making it\
        \ still possible to decode data using the schema ID. This API is recommended\
        \ to be used only in development environments or under extreme circumstances\
        \ where-in, its required to delete a previously registered schema for compatibility\
        \ purposes or re-register previously registered schema."
      operationId: deleteSchemaVersion
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        schema:
          type: string
      - name: permanent
        in: query
        description: Whether to perform a permanent delete
        schema:
          type: boolean
      responses:
        default:
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: integer
                format: int32
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: integer
                format: int32
            application/json; qs=0.5:
              schema:
                type: integer
                format: int32
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
  /subjects/{subject}/versions/{version}/referencedby:
    get:
      summary: Get the schemas that reference the specified schema.
      operationId: getReferencedBy
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        schema:
          type: string
      responses:
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
  /subjects/{subject}/versions/{version}/schema:
    get:
      summary: Get the schema for the specified version of this subject. The unescaped
        schema only is returned.
      operationId: getSchemaOnly
      parameters:
      - name: subject
        in: path
        description: Name of the subject
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        schema:
          type: string
      - name: deleted
        in: query
        description: Whether to include deleted schema
        schema:
          type: boolean
      responses:
        "404":
          description: |-
            Error code 40401 -- Subject not found
            Error code 40402 -- Version not found
        "422":
          description: Error code 42202 -- Invalid version
        "500":
          description: Error code 50001 -- Error in the backend data store
  /v1/metadata/id:
    get:
      summary: Get the server metadata
      operationId: getClusterId
      responses:
        "500":
          description: |
            Error code 50001 -- Error in the backend data store
components:
  schemas:
    CompatibilityCheckResponse:
      type: object
      properties:
        is_compatible:
          type: boolean
        messages:
          type: array
          items:
            type: string
    RegisterSchemaRequest:
      type: object
      properties:
        version:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        schemaType:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/SchemaReference'
        schema:
          type: string
    SchemaReference:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        version:
          type: integer
          format: int32
    Config:
      type: object
      properties:
        compatibilityLevel:
          type: string
          description: Compatability Level
          enum:
          - "BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE,\
            \ NONE"
    ConfigUpdateRequest:
      type: object
      properties:
        compatibility:
          type: string
          description: Compatability Level
          enum:
          - "BACKWARD, BACKWARD_TRANSITIVE, FORWARD, FORWARD_TRANSITIVE, FULL, FULL_TRANSITIVE,\
            \ NONE"
    Mode:
      type: object
      properties:
        mode:
          type: string
    ModeUpdateRequest:
      type: object
      properties:
        mode:
          type: string
    SchemaString:
      type: object
      properties:
        schemaType:
          type: string
          description: Schema type
        schema:
          type: string
          description: Schema string identified by the ID
        references:
          type: array
          description: Schema references
          items:
            $ref: '#/components/schemas/SchemaReference'
        maxId:
          type: integer
          description: Maximum ID
          format: int32
    Schema:
      type: object
      properties:
        subject:
          type: string
        version:
          type: integer
          format: int32
        id:
          type: integer
          format: int32
        schemaType:
          type: string
        references:
          type: array
          items:
            $ref: '#/components/schemas/SchemaReference'
        schema:
          type: string
    SubjectVersion:
      type: object
      properties:
        subject:
          type: string
        version:
          type: integer
          format: int32
    ServerClusterId:
      type: object
      properties:
        scope:
          type: object
          additionalProperties:
            type: object
        id:
          type: string
    RegisterSchemaResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
