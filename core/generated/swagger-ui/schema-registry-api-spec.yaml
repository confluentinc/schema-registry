---
swagger: "2.0"
info:
  version: "v1"
  title: "Confluent Schema Registry"
schemes:
- "http"
- "https"
paths:
  /:
    get:
      summary: "Schema Registry Root Resource"
      description: "The Root resource is a no-op."
      operationId: "get"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
    post:
      operationId: "post"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
  /compatibility/subjects/{subject}/versions/{version}:
    post:
      summary: "Test input schema against a particular version of a subject's schema\
        \ for compatibility."
      description: "the compatibility level applied for the check is the configured\
        \ compatibility level for the subject (http:get:: /config/(string: subject)).\
        \ If this subject's compatibility level was never changed, then the global\
        \ compatibility level applies (http:get:: /config)."
      operationId: "testCompatibilityBySubjectName"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
      - name: "Accept"
        in: "header"
        required: false
        type: "string"
      - name: "subject"
        in: "path"
        description: "Subject of the schema version against which compatibility is\
          \ to be tested"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "Version of the subject's schema against which compatibility\
          \ is to be tested. Valid values for versionId are between [1,2^31-1] or\
          \ the string \"latest\".\"latest\" checks compatibility of the input schema\
          \ with the last registered schema under the specified subject"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Schema"
        required: true
        schema:
          $ref: "#/definitions/RegisterSchemaRequest"
      - name: "verbose"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CompatibilityCheckResponse"
        404:
          description: "Error code 40401 -- Subject not found\nError code 40402 --\
            \ Version not found"
        422:
          description: "Error code 42201 -- Invalid schema or schema type\nError code\
            \ 42202 -- Invalid version"
        500:
          description: "Error code 50001 -- Error in the backend data store"
  /config:
    get:
      summary: "Get global compatibility level."
      description: ""
      operationId: "getTopLevelConfig"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Config"
        500:
          description: "Error code 50001 -- Error in the backend data store"
    put:
      summary: "Update global compatibility level."
      description: ""
      operationId: "updateTopLevelConfig"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - in: "body"
        name: "body"
        description: "Config Update Request"
        required: true
        schema:
          $ref: "#/definitions/ConfigUpdateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConfigUpdateRequest"
        422:
          description: "Error code 42203 -- Invalid compatibility level"
        500:
          description: "Error code 50001 -- Error in the backend data store\nError\
            \ code 50003 -- Error while forwarding the request to the primary\n"
  /config/{subject}:
    get:
      summary: "Get compatibility level for a subject."
      description: ""
      operationId: "getSubjectLevelConfig"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        required: true
        type: "string"
      - name: "defaultToGlobal"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Config"
        404:
          description: "Subject not found"
        500:
          description: "Error code 50001 -- Error in the backend data store"
    put:
      summary: "Update compatibility level for the specified subject."
      description: ""
      operationId: "updateSubjectLevelConfig"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "Name of the Subject"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Config Update Request"
        required: true
        schema:
          $ref: "#/definitions/ConfigUpdateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ConfigUpdateRequest"
        422:
          description: "Error code 42203 -- Invalid compatibility level\nError code\
            \ 40402 -- Version not found"
        500:
          description: "Error code 50001 -- Error in the backend data store\nError\
            \ code 50003 -- Error while forwarding the request to the primary"
  /mode:
    get:
      operationId: "getTopLevelMode"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ModeGetResponse"
    put:
      operationId: "updateTopLevelMode"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Request"
        required: true
        schema:
          $ref: "#/definitions/ModeUpdateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ModeUpdateRequest"
  /mode/{subject}:
    get:
      operationId: "getMode"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ModeGetResponse"
    put:
      operationId: "updateMode"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Update Request"
        required: true
        schema:
          $ref: "#/definitions/ModeUpdateRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ModeUpdateRequest"
  /schemas:
    get:
      summary: "Get the schemas."
      description: ""
      operationId: "getSchemas"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subjectPrefix"
        in: "query"
        required: false
        type: "string"
      - name: "deleted"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "latestOnly"
        in: "query"
        required: false
        type: "boolean"
        default: false
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        default: 0
        format: "int32"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        default: -1
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Schema"
        500:
          description: "Error code 50001 -- Error in the backend data store\n"
  /schemas/ids/{id}:
    get:
      summary: "Get the schema string identified by the input ID."
      description: ""
      operationId: "getSchema"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "id"
        in: "path"
        description: "Globally unique identifier of the schema"
        required: true
        type: "integer"
        format: "int32"
      - name: "format"
        in: "query"
        required: false
        type: "string"
      - name: "fetchMaxId"
        in: "query"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SchemaString"
        404:
          description: "Error code 40403 -- Schema not found\n"
        500:
          description: "Error code 50001 -- Error in the backend data store\n"
  /schemas/ids/{id}/subjects:
    get:
      summary: "Get all the subjects associated with the input ID."
      description: ""
      operationId: "getSubjects"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "id"
        in: "path"
        description: "Globally unique identifier of the schema"
        required: true
        type: "integer"
        format: "int32"
      - name: "deleted"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
            uniqueItems: true
        404:
          description: "Error code 40403 -- Schema not found\n"
        500:
          description: "Error code 50001 -- Error in the backend data store\n"
  /schemas/ids/{id}/versions:
    get:
      summary: "Get all the subject-version pairs associated with the input ID."
      description: ""
      operationId: "getVersions"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "id"
        in: "path"
        description: "Globally unique identifier of the schema"
        required: true
        type: "integer"
        format: "int32"
      - name: "deleted"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SubjectVersion"
        404:
          description: "Error code 40403 -- Schema not found\n"
        500:
          description: "Error code 50001 -- Error in the backend data store\n"
  /schemas/types:
    get:
      summary: "Get the schema types supported by this registry."
      description: ""
      operationId: "getSchemaTypes"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
            uniqueItems: true
        500:
          description: "Error code 50001 -- Error in the backend data store\n"
  /subjects:
    get:
      summary: "Get a list of registered subjects."
      description: ""
      operationId: "list"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "deleted"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
            uniqueItems: true
        500:
          description: "Error code 50001 -- Error in the backend datastore"
  /subjects/{subject}:
    post:
      summary: "Check if a schema has already been registered under the specified\
        \ subject. If so, this returns the schema string along with its globally unique\
        \ identifier, its version under this subject and the subject name."
      description: ""
      operationId: "lookUpSchemaUnderSubject"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "Subject under which the schema will be registered"
        required: true
        type: "string"
      - name: "deleted"
        in: "query"
        required: false
        type: "boolean"
      - in: "body"
        name: "body"
        description: "Schema"
        required: true
        schema:
          $ref: "#/definitions/RegisterSchemaRequest"
      responses:
        404:
          description: "Error code 40401 -- Subject not found\nError code 40403 --\
            \ Schema not found"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Schema"
    delete:
      summary: "Deletes the specified subject and its associated compatibility level\
        \ if registered. It is recommended to use this API only when a topic needs\
        \ to be recycled or in development environment."
      description: ""
      operationId: "deleteSubject"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "the name of the subject"
        required: true
        type: "string"
      - name: "permanent"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int32"
        404:
          description: "Error code 40401 -- Subject not found"
        500:
          description: "Error code 50001 -- Error in the backend datastore"
  /subjects/{subject}/versions:
    get:
      summary: "Get a list of versions registered under the specified subject."
      description: ""
      operationId: "listVersions"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "Name of the Subject"
        required: true
        type: "string"
      - name: "deleted"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int32"
        404:
          description: "Error code 40401 -- Subject not found"
        500:
          description: "Error code 50001 -- Error in the backend data store"
    post:
      summary: "Register a new schema under the specified subject. If successfully\
        \ registered, this returns the unique identifier of this schema in the registry.\
        \ The returned identifier should be used to retrieve this schema from the\
        \ schemas resource and is different from the schema's version which is associated\
        \ with the subject. If the same schema is registered under a different subject,\
        \ the same identifier will be returned. However, the version of the schema\
        \ may be different under different subjects.\nA schema should be compatible\
        \ with the previously registered schema or schemas (if there are any) as per\
        \ the configured compatibility level. The configured compatibility level can\
        \ be obtained by issuing a GET http:get:: /config/(string: subject). If that\
        \ returns null, then GET http:get:: /config\nWhen there are multiple instances\
        \ of Schema Registry running in the same cluster, the schema registration\
        \ request will be forwarded to one of the instances designated as the primary.\
        \ If the primary is not available, the client will get an error code indicating\
        \ that the forwarding has failed."
      description: ""
      operationId: "register"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "Name of the Subject"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Schema"
        required: true
        schema:
          $ref: "#/definitions/RegisterSchemaRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RegisterSchemaResponse"
        409:
          description: "Incompatible schema"
        422:
          description: "Error code 42201 -- Invalid schema or schema type"
        500:
          description: "Error code 50001 -- Error in the backend data store\nError\
            \ code 50002 -- Operation timed out\nError code 50003 -- Error while forwarding\
            \ the request to the primary"
  /subjects/{subject}/versions/{version}:
    get:
      summary: "Get a specific version of the schema registered under this subject."
      description: ""
      operationId: "getSchemaByVersion"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "Name of the Subject"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        type: "string"
      - name: "deleted"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Schema"
        404:
          description: "Error code 40401 -- Subject not found\nError code 40402 --\
            \ Version not found"
        422:
          description: "Error code 42202 -- Invalid version"
        500:
          description: "Error code 50001 -- Error in the backend data store"
    delete:
      summary: "Deletes a specific version of the schema registered under this subject.\
        \ This only deletes the version and the schema ID remains intact making it\
        \ still possible to decode data using the schema ID. This API is recommended\
        \ to be used only in development environments or under extreme circumstances\
        \ where-in, its required to delete a previously registered schema for compatibility\
        \ purposes or re-register previously registered schema."
      description: ""
      operationId: "deleteSchemaVersion"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "Name of the Subject"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        type: "string"
      - name: "permanent"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "integer"
            format: "int32"
        404:
          description: "Error code 40401 -- Subject not found\nError code 40402 --\
            \ Version not found"
        422:
          description: "Error code 42202 -- Invalid version"
        500:
          description: "Error code 50001 -- Error in the backend data store"
  /subjects/{subject}/versions/{version}/referencedby:
    get:
      summary: "Get the schemas that reference the specified schema."
      description: ""
      operationId: "getReferencedBy"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "Name of the Subject"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int32"
        404:
          description: "Error code 40401 -- Subject not found\nError code 40402 --\
            \ Version not found"
        422:
          description: "Error code 42202 -- Invalid version"
        500:
          description: "Error code 50001 -- Error in the backend data store"
  /subjects/{subject}/versions/{version}/schema:
    get:
      summary: "Get the schema for the specified version of this subject. The unescaped\
        \ schema only is returned."
      description: ""
      operationId: "getSchemaOnly"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters:
      - name: "subject"
        in: "path"
        description: "Name of the Subject"
        required: true
        type: "string"
      - name: "version"
        in: "path"
        description: "Version of the schema to be returned. Valid values for versionId\
          \ are between [1,2^31-1] or the string \"latest\". \"latest\" returns the\
          \ last registered schema under the specified subject. Note that there may\
          \ be a new latest schema that gets registered right after this request is\
          \ served."
        required: true
        type: "string"
      - name: "deleted"
        in: "query"
        required: false
        type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        404:
          description: "Error code 40401 -- Subject not found\nError code 40402 --\
            \ Version not found"
        422:
          description: "Error code 42202 -- Invalid version"
        500:
          description: "Error code 50001 -- Error in the backend data store"
  /v1/metadata/id:
    get:
      summary: "Get the server metadata"
      description: ""
      operationId: "getClusterId"
      consumes:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json"
      - "application/json"
      - "application/octet-stream"
      produces:
      - "application/vnd.schemaregistry.v1+json"
      - "application/vnd.schemaregistry+json; qs=0.9"
      - "application/json; qs=0.5"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ServerClusterId"
        500:
          description: "Error code 50001 -- Error in the backend data store\n"
definitions:
  CompatibilityCheckResponse:
    type: "object"
    properties:
      is_compatible:
        type: "boolean"
      messages:
        type: "array"
        items:
          type: "string"
  Config:
    type: "object"
    properties:
      compatibilityLevel:
        type: "string"
        description: "Compatability Level"
        enum:
        - "BACKWARD"
        - "BACKWARD_TRANSITIVE"
        - "FORWARD"
        - "FORWARD_TRANSITIVE"
        - "FULL"
        - "FULL_TRANSITIVE"
        - "NONE"
  ConfigUpdateRequest:
    type: "object"
    properties:
      compatibility:
        type: "string"
        description: "Compatability Level"
        enum:
        - "BACKWARD"
        - "BACKWARD_TRANSITIVE"
        - "FORWARD"
        - "FORWARD_TRANSITIVE"
        - "FULL"
        - "FULL_TRANSITIVE"
        - "NONE"
  ModeGetResponse:
    type: "object"
    properties:
      mode:
        type: "string"
  ModeUpdateRequest:
    type: "object"
    properties:
      mode:
        type: "string"
  RegisterSchemaRequest:
    type: "object"
    properties:
      version:
        type: "integer"
        format: "int32"
      id:
        type: "integer"
        format: "int32"
      schemaType:
        type: "string"
      references:
        type: "array"
        items:
          $ref: "#/definitions/SchemaReference"
      schema:
        type: "string"
  RegisterSchemaResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
  Schema:
    type: "object"
    properties:
      subject:
        type: "string"
      version:
        type: "integer"
        format: "int32"
      id:
        type: "integer"
        format: "int32"
      schemaType:
        type: "string"
      references:
        type: "array"
        items:
          $ref: "#/definitions/SchemaReference"
      schema:
        type: "string"
  SchemaReference:
    type: "object"
    properties:
      name:
        type: "string"
      subject:
        type: "string"
      version:
        type: "integer"
        format: "int32"
  SchemaString:
    type: "object"
    properties:
      schemaType:
        type: "string"
        description: "Schema type"
      schema:
        type: "string"
        description: "Schema string identified by the ID"
      references:
        type: "array"
        description: "Schema references"
        items:
          $ref: "#/definitions/SchemaReference"
      maxId:
        type: "integer"
        format: "int32"
        description: "Maximum ID"
  ServerClusterId:
    type: "object"
    properties:
      scope:
        type: "object"
        readOnly: true
        additionalProperties:
          type: "object"
      id:
        type: "string"
  SubjectVersion:
    type: "object"
    properties:
      subject:
        type: "string"
      version:
        type: "integer"
        format: "int32"
