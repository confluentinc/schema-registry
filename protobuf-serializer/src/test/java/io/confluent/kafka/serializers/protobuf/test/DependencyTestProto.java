// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DependencyTestProto.proto

package io.confluent.kafka.serializers.protobuf.test;

public final class DependencyTestProto {
  private DependencyTestProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DependencyMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.confluent.kafka.serializers.protobuf.test.DependencyMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
     * @return Whether the nestedMessage field is set.
     */
    boolean hasNestedMessage();
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
     * @return The nestedMessage.
     */
    io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage getNestedMessage();
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
     */
    io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessageOrBuilder getNestedMessageOrBuilder();

    /**
     * <code>bool is_active = 2;</code>
     * @return The isActive.
     */
    boolean getIsActive();

    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
     * @return Whether the testMesssage field is set.
     */
    boolean hasTestMesssage();
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
     * @return The testMesssage.
     */
    io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage getTestMesssage();
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
     */
    io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessageOrBuilder getTestMesssageOrBuilder();
  }
  /**
   * Protobuf type {@code io.confluent.kafka.serializers.protobuf.test.DependencyMessage}
   */
  public  static final class DependencyMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.confluent.kafka.serializers.protobuf.test.DependencyMessage)
      DependencyMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DependencyMessage.newBuilder() to construct.
    private DependencyMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DependencyMessage() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DependencyMessage();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DependencyMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.Builder subBuilder = null;
              if (nestedMessage_ != null) {
                subBuilder = nestedMessage_.toBuilder();
              }
              nestedMessage_ = input.readMessage(io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(nestedMessage_);
                nestedMessage_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              isActive_ = input.readBool();
              break;
            }
            case 26: {
              io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.Builder subBuilder = null;
              if (testMesssage_ != null) {
                subBuilder = testMesssage_.toBuilder();
              }
              testMesssage_ = input.readMessage(io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(testMesssage_);
                testMesssage_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage.class, io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage.Builder.class);
    }

    public static final int NESTED_MESSAGE_FIELD_NUMBER = 1;
    private io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage nestedMessage_;
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
     * @return Whether the nestedMessage field is set.
     */
    public boolean hasNestedMessage() {
      return nestedMessage_ != null;
    }
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
     * @return The nestedMessage.
     */
    public io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage getNestedMessage() {
      return nestedMessage_ == null ? io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.getDefaultInstance() : nestedMessage_;
    }
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
     */
    public io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessageOrBuilder getNestedMessageOrBuilder() {
      return getNestedMessage();
    }

    public static final int IS_ACTIVE_FIELD_NUMBER = 2;
    private boolean isActive_;
    /**
     * <code>bool is_active = 2;</code>
     * @return The isActive.
     */
    public boolean getIsActive() {
      return isActive_;
    }

    public static final int TEST_MESSSAGE_FIELD_NUMBER = 3;
    private io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage testMesssage_;
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
     * @return Whether the testMesssage field is set.
     */
    public boolean hasTestMesssage() {
      return testMesssage_ != null;
    }
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
     * @return The testMesssage.
     */
    public io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage getTestMesssage() {
      return testMesssage_ == null ? io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.getDefaultInstance() : testMesssage_;
    }
    /**
     * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
     */
    public io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessageOrBuilder getTestMesssageOrBuilder() {
      return getTestMesssage();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (nestedMessage_ != null) {
        output.writeMessage(1, getNestedMessage());
      }
      if (isActive_ != false) {
        output.writeBool(2, isActive_);
      }
      if (testMesssage_ != null) {
        output.writeMessage(3, getTestMesssage());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (nestedMessage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getNestedMessage());
      }
      if (isActive_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isActive_);
      }
      if (testMesssage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTestMesssage());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage)) {
        return super.equals(obj);
      }
      io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage other = (io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage) obj;

      if (hasNestedMessage() != other.hasNestedMessage()) return false;
      if (hasNestedMessage()) {
        if (!getNestedMessage()
            .equals(other.getNestedMessage())) return false;
      }
      if (getIsActive()
          != other.getIsActive()) return false;
      if (hasTestMesssage() != other.hasTestMesssage()) return false;
      if (hasTestMesssage()) {
        if (!getTestMesssage()
            .equals(other.getTestMesssage())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNestedMessage()) {
        hash = (37 * hash) + NESTED_MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getNestedMessage().hashCode();
      }
      hash = (37 * hash) + IS_ACTIVE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsActive());
      if (hasTestMesssage()) {
        hash = (37 * hash) + TEST_MESSSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getTestMesssage().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code io.confluent.kafka.serializers.protobuf.test.DependencyMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.confluent.kafka.serializers.protobuf.test.DependencyMessage)
        io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage.class, io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage.Builder.class);
      }

      // Construct using io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (nestedMessageBuilder_ == null) {
          nestedMessage_ = null;
        } else {
          nestedMessage_ = null;
          nestedMessageBuilder_ = null;
        }
        isActive_ = false;

        if (testMesssageBuilder_ == null) {
          testMesssage_ = null;
        } else {
          testMesssage_ = null;
          testMesssageBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_descriptor;
      }

      @java.lang.Override
      public io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage getDefaultInstanceForType() {
        return io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage.getDefaultInstance();
      }

      @java.lang.Override
      public io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage build() {
        io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage buildPartial() {
        io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage result = new io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage(this);
        if (nestedMessageBuilder_ == null) {
          result.nestedMessage_ = nestedMessage_;
        } else {
          result.nestedMessage_ = nestedMessageBuilder_.build();
        }
        result.isActive_ = isActive_;
        if (testMesssageBuilder_ == null) {
          result.testMesssage_ = testMesssage_;
        } else {
          result.testMesssage_ = testMesssageBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage) {
          return mergeFrom((io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage other) {
        if (other == io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage.getDefaultInstance()) return this;
        if (other.hasNestedMessage()) {
          mergeNestedMessage(other.getNestedMessage());
        }
        if (other.getIsActive() != false) {
          setIsActive(other.getIsActive());
        }
        if (other.hasTestMesssage()) {
          mergeTestMesssage(other.getTestMesssage());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage nestedMessage_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage, io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.Builder, io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessageOrBuilder> nestedMessageBuilder_;
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       * @return Whether the nestedMessage field is set.
       */
      public boolean hasNestedMessage() {
        return nestedMessageBuilder_ != null || nestedMessage_ != null;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       * @return The nestedMessage.
       */
      public io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage getNestedMessage() {
        if (nestedMessageBuilder_ == null) {
          return nestedMessage_ == null ? io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.getDefaultInstance() : nestedMessage_;
        } else {
          return nestedMessageBuilder_.getMessage();
        }
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       */
      public Builder setNestedMessage(io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage value) {
        if (nestedMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          nestedMessage_ = value;
          onChanged();
        } else {
          nestedMessageBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       */
      public Builder setNestedMessage(
          io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.Builder builderForValue) {
        if (nestedMessageBuilder_ == null) {
          nestedMessage_ = builderForValue.build();
          onChanged();
        } else {
          nestedMessageBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       */
      public Builder mergeNestedMessage(io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage value) {
        if (nestedMessageBuilder_ == null) {
          if (nestedMessage_ != null) {
            nestedMessage_ =
              io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.newBuilder(nestedMessage_).mergeFrom(value).buildPartial();
          } else {
            nestedMessage_ = value;
          }
          onChanged();
        } else {
          nestedMessageBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       */
      public Builder clearNestedMessage() {
        if (nestedMessageBuilder_ == null) {
          nestedMessage_ = null;
          onChanged();
        } else {
          nestedMessage_ = null;
          nestedMessageBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       */
      public io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.Builder getNestedMessageBuilder() {
        
        onChanged();
        return getNestedMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       */
      public io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessageOrBuilder getNestedMessageOrBuilder() {
        if (nestedMessageBuilder_ != null) {
          return nestedMessageBuilder_.getMessageOrBuilder();
        } else {
          return nestedMessage_ == null ?
              io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.getDefaultInstance() : nestedMessage_;
        }
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.NestedMessage nested_message = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage, io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.Builder, io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessageOrBuilder> 
          getNestedMessageFieldBuilder() {
        if (nestedMessageBuilder_ == null) {
          nestedMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage, io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessage.Builder, io.confluent.kafka.serializers.protobuf.test.NestedTestProto.NestedMessageOrBuilder>(
                  getNestedMessage(),
                  getParentForChildren(),
                  isClean());
          nestedMessage_ = null;
        }
        return nestedMessageBuilder_;
      }

      private boolean isActive_ ;
      /**
       * <code>bool is_active = 2;</code>
       * @return The isActive.
       */
      public boolean getIsActive() {
        return isActive_;
      }
      /**
       * <code>bool is_active = 2;</code>
       * @param value The isActive to set.
       * @return This builder for chaining.
       */
      public Builder setIsActive(boolean value) {
        
        isActive_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool is_active = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsActive() {
        
        isActive_ = false;
        onChanged();
        return this;
      }

      private io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage testMesssage_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage, io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.Builder, io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessageOrBuilder> testMesssageBuilder_;
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       * @return Whether the testMesssage field is set.
       */
      public boolean hasTestMesssage() {
        return testMesssageBuilder_ != null || testMesssage_ != null;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       * @return The testMesssage.
       */
      public io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage getTestMesssage() {
        if (testMesssageBuilder_ == null) {
          return testMesssage_ == null ? io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.getDefaultInstance() : testMesssage_;
        } else {
          return testMesssageBuilder_.getMessage();
        }
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       */
      public Builder setTestMesssage(io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage value) {
        if (testMesssageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          testMesssage_ = value;
          onChanged();
        } else {
          testMesssageBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       */
      public Builder setTestMesssage(
          io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.Builder builderForValue) {
        if (testMesssageBuilder_ == null) {
          testMesssage_ = builderForValue.build();
          onChanged();
        } else {
          testMesssageBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       */
      public Builder mergeTestMesssage(io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage value) {
        if (testMesssageBuilder_ == null) {
          if (testMesssage_ != null) {
            testMesssage_ =
              io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.newBuilder(testMesssage_).mergeFrom(value).buildPartial();
          } else {
            testMesssage_ = value;
          }
          onChanged();
        } else {
          testMesssageBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       */
      public Builder clearTestMesssage() {
        if (testMesssageBuilder_ == null) {
          testMesssage_ = null;
          onChanged();
        } else {
          testMesssage_ = null;
          testMesssageBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       */
      public io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.Builder getTestMesssageBuilder() {
        
        onChanged();
        return getTestMesssageFieldBuilder().getBuilder();
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       */
      public io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessageOrBuilder getTestMesssageOrBuilder() {
        if (testMesssageBuilder_ != null) {
          return testMesssageBuilder_.getMessageOrBuilder();
        } else {
          return testMesssage_ == null ?
              io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.getDefaultInstance() : testMesssage_;
        }
      }
      /**
       * <code>.io.confluent.kafka.serializers.protobuf.test.TestMessage test_messsage = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage, io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.Builder, io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessageOrBuilder> 
          getTestMesssageFieldBuilder() {
        if (testMesssageBuilder_ == null) {
          testMesssageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage, io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessage.Builder, io.confluent.kafka.serializers.protobuf.test.TestMessageProtos.TestMessageOrBuilder>(
                  getTestMesssage(),
                  getParentForChildren(),
                  isClean());
          testMesssage_ = null;
        }
        return testMesssageBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.confluent.kafka.serializers.protobuf.test.DependencyMessage)
    }

    // @@protoc_insertion_point(class_scope:io.confluent.kafka.serializers.protobuf.test.DependencyMessage)
    private static final io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage();
    }

    public static io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DependencyMessage>
        PARSER = new com.google.protobuf.AbstractParser<DependencyMessage>() {
      @java.lang.Override
      public DependencyMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DependencyMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DependencyMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DependencyMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.confluent.kafka.serializers.protobuf.test.DependencyTestProto.DependencyMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\031DependencyTestProto.proto\022,io.confluen" +
      "t.kafka.serializers.protobuf.test\032\025Neste" +
      "dTestProto.proto\032\025PublicTestProto.proto\"" +
      "\315\001\n\021DependencyMessage\022S\n\016nested_message\030" +
      "\001 \001(\0132;.io.confluent.kafka.serializers.p" +
      "rotobuf.test.NestedMessage\022\021\n\tis_active\030" +
      "\002 \001(\010\022P\n\rtest_messsage\030\003 \001(\01329.io.conflu" +
      "ent.kafka.serializers.protobuf.test.Test" +
      "MessageB.\n,io.confluent.kafka.serializer" +
      "s.protobuf.testb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.confluent.kafka.serializers.protobuf.test.NestedTestProto.getDescriptor(),
          io.confluent.kafka.serializers.protobuf.test.PublicTestProto.getDescriptor(),
        });
    internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_io_confluent_kafka_serializers_protobuf_test_DependencyMessage_descriptor,
        new java.lang.String[] { "NestedMessage", "IsActive", "TestMesssage", });
    io.confluent.kafka.serializers.protobuf.test.NestedTestProto.getDescriptor();
    io.confluent.kafka.serializers.protobuf.test.PublicTestProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
